type Query {
    events: [Event!]!
    users: [User!]!
    login(loginInput: LoginInput!): AuthData!
    bookings: [Booking!]!
}

type Mutation {
    createEvent(eventInput: EventInput!): Event!
    createUser(userInput: UserInput!): User!
    bookEvent(eventId: ID!): Booking!
    cancelBooking(bookingId: ID!): Event!
}

input EventInput {
    title: String!
    description: String!
    price: Float!
    date: String!
}

type Event {
    id: ID!
    title: String!
    description: String!
    price: Float!
    date: String!
    creator: User
}

input UserInput {
    email: String!
    password: String!
}

input LoginInput {
    email: String!
    password: String!
}

type User {
    id: ID!
    email: String!
    password: String
    createdEvents: [Event!]
    bookings: [Booking!]
}

type AuthData {
    userId: ID!
    token: String!
    tokenExpiration: Int!
}

type Booking {
    id: ID!
    event: Event!
    user: User!
    createdAt: String!
    updatedAt: String!
}